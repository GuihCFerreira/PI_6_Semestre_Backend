openapi : 3.0.3

info:
  title: Integration Project (P.I.) API Documentation - IPlay
  version: 1.0.0
  contact:
    email: guihdevtestes@gmail.com

servers:
  - url: https://iplay-dte2ffd6aghdd2cx.brazilsouth-01.azurewebsites.net
    description: Production server
  - url: https://pi-6-semestre-1edb53abee65.herokuapp.com
    description: Staging server
  - url: http://localhost:5836
    description: Local server

tags:
  - name: Authentication
    description: Operation for user authentication
  - name: User
    description: Operation for user collections  
  - name: Quiz Template
    description: Operation for quiz template
  - name: Quiz
    description: Operation for quizzes
  - name: Games
    description: Operation for games

paths:

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              required: ['email','password']
              $ref: '#/components/schemas/RequestLogin'
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserAuthenticated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorLoginEmptyBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorInvalidPassword'           
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'                  
  /sign-in:
    post:
      tags:
        - Authentication
      summary: Create a new user
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              required: ['email','password','name']
              $ref: '#/components/schemas/RequestSignIn'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserAuthenticated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorSignInEmptyBody'
        '409':
          description: Conflicted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserAlreadyExists'

  /user:
    get:
      tags:
        - User
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ResponseUserWithImage'
                    - $ref: '#/components/schemas/ResponseUserWithImage'
                    - $ref: '#/components/schemas/ResponseUserWithImage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /user/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get user by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserWithImage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorIdParamNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorIdParamInvalidFormat'            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /user/image:
    post:
      tags:
        - User
      summary: Upload user image
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content: 
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: User image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserWithImage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorBodyWithoutImage'
                  - $ref: '#/components/schemas/ResponseErrorImageWithInvalidFormat'
                  - $ref: '#/components/schemas/ResponseErrorImageNotFoundOnBody'
                  - $ref: '#/components/schemas/ResponseErrorFailedConvertImage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'

    delete:
      tags:
        - User
      summary: Delete user image
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User image deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserWithoutImage'

  /quiz/template:
    get:
      tags:
        - Quiz Template
      summary: Get quiz template
      responses:
        '200':
          description: Get quiz template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseQuizTemplate' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound' 
  /games/quiz/template:
    get:
      tags:
        - Quiz Template
      summary: Get the games answer for the quiz template
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Number of the page to be retrieved

        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Number of items per page

        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Game name to be searched  
      responses:
        '200':
          description: Get the games answer for the quiz template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGameQuizTemplate' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'                                        
  
  /quiz:
    get:
      tags:
        - Quiz
      summary: Get all quizzes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all quizzes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAllQuizzes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'

    post:
      tags:
        - Quiz
      summary: Create a new quiz
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQuiz'
      responses:
        '201':
          description: Quiz created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBaseQuiz'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorZodValidation'
                  - $ref: '#/components/schemas/ResponseErrorUserIdNotFoundInToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /quiz/{id}:
    get:
      tags:
        - Quiz
      summary: Get quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get quiz by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBaseQuiz'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorIdParamNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorIdParamInvalidFormat'            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
                  - $ref: '#/components/schemas/ResponseErrorQuizNotFound'

    delete:
      tags:
        - Quiz
      summary: Delete quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Quiz deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorIdParamNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorIdParamInvalidFormat'    
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
                  - $ref: '#/components/schemas/ResponseErrorQuizNotFound'

    patch:
      tags:
        - Quiz
      summary: Update quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody: 
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/RequestQuiz'      
      responses:
        '200':
          description: Quiz updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBaseQuiz'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorZodValidation'   
                  - $ref: '#/components/schemas/ResponseErrorIdParamNotProvided'
                  - $ref: '#/components/schemas/ResponseErrorIdParamInvalidFormat'  
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
                  - $ref: '#/components/schemas/ResponseErrorQuizNotFound'                            
  /quiz/user:
    get:
      tags:
        - Quiz
      summary: Get all quizzes by user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all quizzes by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAllQuizzes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserIdNotFoundInToken'         
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /quiz/user/history:
    get:
      tags:
        - Quiz
      summary: Get all quizzes history by user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all quizzes history by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAllQuizzes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserIdNotFoundInToken'         
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /quiz/user/last:
    get:
      tags:
        - Quiz
      summary: Get last quiz by user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get last quiz by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBaseQuiz'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseErrorUserIdNotFoundInToken'        
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorQuizNotFound'
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'

  /games:
    get:
      tags:
        - Games
      summary: Get all games
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Number of the page to be retrieved

        - name: perPage
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Number of items per page
      responses:
        '200':
          description: Get all games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseAllGames'           
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
  /games/{id}:
    get:
      tags:
        - Games
      summary: Get game by Game ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get game by Game ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGameComplete'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorGameIdNotProvided'   
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorGameNotFound'
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound' 
  /games/recomendations:
    get:
      tags:
        - Games
      summary: Get game recomendations by last user quiz
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get game recomendations
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ResponseGameRecomendation'
                    - $ref: '#/components/schemas/ResponseGameRecomendation'
                    - $ref: '#/components/schemas/ResponseGameRecomendation'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf: 
                  - $ref: '#/components/schemas/ResponseErrorUserIdNotFoundInToken'             
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorTokenNotProvided'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResponseErrorUserNotFound'
                  - $ref: '#/components/schemas/ResponseErrorQuizNotFound'
                  - $ref: '#/components/schemas/ResponseErrorNoQuizzesFoundForUser'

components:
  schemas:

    ResponseErrorTokenNotProvided:
      type: object
      properties:
        message:
          type: string
          default: No token provided or invalid format  
    ResponseErrorIdParamNotProvided:
      type: object
      properties:
        message:
          type: string
          default: Invalid ID. ID is required on query    
    ResponseErrorIdParamInvalidFormat:
      type: object
      properties:
        message:
          type: string
          default: Invalid ID. ID must be a valid cuid (25 alphanumeric characters)   
    ResponseErrorUserIdNotFoundInToken:
      type: object
      properties:
        message:
          type: string
          default: User ID is required         
    ResponseErrorZodValidation:
      type: object
      properties:
        error:
          type: object
          properties:
            name:
              type: string
              default: ZodError
            issues:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                    default: invalid_type
                  expected:
                    type: string
                    default: string
                  received:
                    type: string
                    default: number  
                  message:
                    type: string
                    default: Expected string, received number | Array must contain at least 1 element(s)

    ResponseErrorUserNotFound:
      type: object
      properties:
        message:
          type: string
          default: User not found!
    ResponseErrorInvalidPassword:
      type: object
      properties:
        message:
          type: string
          default: Invalid password!   
    ResponseErrorLoginEmptyBody:
      type: object
      properties:
        message:
          type: string
          default: email and password is required in body
    RequestLogin:
      type: object
      properties:
        email:
          type: string
          example: user@email.com
          description: User email
        password:
          type: string
          example: '@Password123'
          description: User password

    ResponseUserAuthenticated:
      type: object
      properties:
        name:
          type: string
          example: Full Name User
          description: User name
        email:
          type: string
          example: user@email.com
          description: User email
        photo:
          type: string
          example: 'https://res.cloudinary.com/guih-dev/image/upload/v1747966025/IPlay/cmay3ha2i0000xduyj6vi6q8k.png'
          description: User photo  
        token:
          type: string
          example: 'dkad921jkj1jKJD9jdkj10384hdajh19283'
          description: JWT TOKEN      
    ResponseUserWithImage:
      type: object
      properties:
        id:
          type: string
          example: "cmay3ha2i0000xduyj6vi6q8k"
          description: User ID
        name:
          type: string
          example: Full Name User
          description: User name
        email:
          type: string
          example: user@email.com
          description: User email
        photo:
          type: string
          example: 'https://res.cloudinary.com/guih-dev/image/upload/v1747966025/IPlay/cmay3ha2i0000xduyj6vi6q8k.png'
          description: User photo  
        photo_id:
          type: string
          example: 'IPlay/cmay3ha2i0000xduyj6vi6q8k'
          description: User photo id  
    ResponseErrorUserWithoutImage:
      type: object
      properties:
        message:
          type: string
          default: User does not have an image
    ResponseErrorBodyWithoutImage:
      type: object
      properties:
        message:
          type: string
          default: The image is required in form-data with the name 'image'.
    ResponseErrorImageWithInvalidFormat:
      type: object
      properties:
        message:
          type: string
          default: File format is not supported, only jpg, jpeg and png are allowed
    ResponseErrorImageNotFoundOnBody:
      type: object
      properties:
        message:
          type: string
          default: Image is required
    ResponseErrorFailedConvertImage:
      type: object
      properties:
        message:
          type: string
          default: Error formatting image            

    RequestSignIn:
      type: object
      properties:
        name:
          type: string
          example: Full Name User
          description: User name
        email:
          type: string
          example: user@email.com
          description: User email
        password:
          type: string
          example: '@Password123'
          description: User password
    ResponseErrorSignInEmptyBody:
      type: object
      properties:
        message:
          type: string
          default: email, password and name is required in body  
    ResponseErrorUserAlreadyExists:
      type: object
      properties:
        message:
          type: string
          default: User already exists!          

    QuestionTagsEnum:
      type: string
      enum:
        - FAVORITE_GAMES
        - GENRES
        - CATEGORIES
        - OPERATIONAL_SYSTEMS
        - GAME_LANGUAGE
        - PUBLISHERS
        - MODE
        - STYLE
        - CAMERA
    QuestionTypeEnum:
      type: string
      enum:
        - SINGLE_CHOICE
        - MULTIPLE_CHECKBOX
        - INPUT_CHECKBOX

    ResponsePagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
          description: Current page number
        perPage:
          type: integer
          example: 20
          description: Number of items per page
        total:
          type: integer
          example: 20
          description: Total number of items
        nextPage:
          type: integer
          example: 2
          description: Next page number
        previousPage:
          type: integer
          example: 0
          description: Previous page number
        firstPage:
          type: integer
          example: 1
          description: First page number
        lastPage:
          type: integer
          example: 5
          description: Last page number
        gamesTotal:
          type: integer
          example: 100
          description: Total number of the array       
    ResponseSimplePagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
          description: Current page number
        perPage:
          type: integer
          example: 20
          description: Number of items per page
        total:
          type: integer
          example: 20
          description: Total number of items
        hasNextPage:
          type: boolean
          example: true
          description: Indicates if there is a next page

    ResponseQuizTemplate:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/ResponseQuizQuestion'
          - $ref: '#/components/schemas/ResponseQuizQuestion'
          - $ref: '#/components/schemas/ResponseQuizQuestion'
    ResponseQuizQuestion:
      type: object
      properties:
        question:
          type: string
          example: What is your favorite game?
          description: Quiz question
        min_length:
          type: number
          example: 1
          description: Minimum length of the answer
        required:
          type: boolean
          example: true
          description: If the question is required  
        tag:
          $ref: '#/components/schemas/QuestionTagsEnum'
        type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        options:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ResponseQuizAnswer'
              - $ref: '#/components/schemas/ResponseQuizAnswer'   
    ResponseQuizAnswer:
      type: object
      properties:
        answer:
          type: string
          example: Answer 1
          description: Quiz answer
        value:
          type: string
          example: value 1
          description: Quiz answer value
    ResponseQuizGameAnswer:
      type: object
      properties:
        answer:
          type: string
          example: Counter-Strike 2
          description: Quiz answer (game name)
        value:
          type: integer
          example: 730
          description: Quiz answer value (game id)
        image:
          type: string
          example: 'https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/730/header.jpg?t=1729703045'
          description: Game header image  
    ResponseGameQuizTemplate:
      type: object
      properties:
        pagination::
          $ref: '#/components/schemas/ResponseSimplePagination'
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ResponseQuizGameAnswer'
              - $ref: '#/components/schemas/ResponseQuizGameAnswer'

    ResponseAllQuizzes:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/ResponseBaseQuiz'
          - $ref: '#/components/schemas/ResponseBaseQuiz'
          - $ref: '#/components/schemas/ResponseBaseQuiz'
    ResponseBaseQuiz:
      type: object
      properties:
        id:
          type: string
          example: "762jhakjs902287j1sasfdw"
        user_id:
          type: string
          example: "762jhakjs902287j1sasfdw"
        favorite_games:
          type: array
          items:
            type: integer
          example: [578080, 488824, 292030, 2358720]
        genres:
          type: array
          items:
            type: string
          example: ["Adventure", "Action"]
        categories:
          type: array
          items:
            type: string
          example: []
        operational_systems:
          type: array
          items:
            type: string
            enum: [windows, mac, linux]
          example: ["windows"]
        game_language:
          type: string
          example: "Portuguese - Brazil"
        publishers:
          type: array
          items:
            type: string
          example: []
        game_modes:
          type: array
          items:
            type: string
          example: ["Singleplayer | Single-player", "Co-op | Online Co-Op | Local Co-Op | Shared/Split Screen Co-op"]
        game_styles:
          type: array
          items:
            type: string
          example: []
        camera_perspective:
          type: array
          items:
            type: string
          example: ["Realistic | Photorealistic | 3D | Cinematic | Beautiful", "Stylized | Cartoony | Colorful | Anime | Hand-drawn | Comic Book"]
    RequestQuiz:
      type: object
      properties:
        FAVORITE_GAMES:
          type: array
          items:
            type: integer
          example: [578080, 488824, 292030, 2358720, 1174180]
        GENRES:
          type: array
          items:
            type: string
          example: ["Adventure", "Action"]
        CATEGORIES:
          type: array
          items:
            type: string
          example: ["Single-player", "Co-op", "PvP"]
        PUBLISHERS:
          type: array
          items:
            type: string
          example: ["Square Enix"]
        GAME_LANGUAGE:
          type: array
          items:
            type: string
          example: ["Portuguese - Brazil"]
        OPERATIONAL_SYSTEMS:
          type: array
          items:
            type: string
          example: ["windows"]
        MODE:
          type: array
          items:
            type: string
          example: ["Singleplayer | Single-player", "Co-op | Online Co-Op | Local Co-Op | Shared/Split Screen Co-op"]
        STYLE:
          type: array
          items:
            type: string
          example: [""]
        CAMERA:
          type: array
          items:
            type: string
          example: ["Realistic | Photorealistic | 3D | Cinematic | Beautiful", "Stylized | Cartoony | Colorful | Anime | Hand-drawn | Comic Book"]
    ResponseErrorQuizNotFound:
      type: object
      properties:
        message:
          type: string
          default: Quiz not found!
    ResponseErrorNoQuizzesFoundForUser:
      type: object
      properties:
        message:
          type: string
          default: No quizzes found for this user!  

    ResponseGameRecomendation:
      type: object
      properties:
        name:
          type: string
          example: Counter-Strike 2
          description: Game name
        game_id:
          type: integer
          example: 730
          description: Game ID (That's not the item id, it's game ID used by Steam)
        header_image:
          type: string
          format: uri
          example: https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/730/header.jpg?t=1729703045
          description: Game header image
        short_description:
          type: string
          example: For over two decades, Counter-Strike has offered an elite competitive experience...
          description: Game short description
        release_date:
          type: string
          format: date
          example: 2012-08-21
          description: Game release date
    ResponseGameComplete:
      type: object
      properties:
        id:
          type: string
          example: cmax7a3o8003jwbj047ncz5ay
          description: Game ID in the database
        game_id:
          type: integer
          example: 730
          description: Game ID (That's not the item id, it's game ID used by Steam)
        name:
          type: string
          example: Counter-Strike 2
          description: Game name
        short_description:
          type: string
          example: For over two decades, Counter-Strike has offered an elite competitive experience...
          description: Game short description
        about_the_game:
          type: string
          example: For over two decades, Counter-Strike has offered an elite competitive experience...
          description: Short text describing the game
        header_image:
          type: string
          format: uri
          example: https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/730/header.jpg
          description: Game header image
        release_date:
          type: string
          format: date
          example: 2012-08-21
          description: Game release date
        supported_languages:
          type: array
          items:
            type: string
          example: [ "English", "Portuguese - Brazil" ]
          description: Supported languages by the game
        full_audio_languages:
          type: array
          items:
            type: string
          example: [ "English", "Indonesian" ]
          description: Full audio languages by the game
        publishers:
          type: array
          items:
            type: string
          example: [ "Valve" ]
          description: Game publishers
        categories:
          type: array
          items:
            type: string
          example: [ "Multi-player", "Steam Workshop" ]
          description: Game categories
        genres:
          type: array
          items:
            type: string
          example: [ "Action", "Free To Play" ]
          description: Game genres
        screenshots:
          type: array
          items:
            type: string
            format: uri
          example:
            - https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/730/ss_1.jpg
            - https://shared.akamai.steamstatic.com/store_item_assets/steam/apps/730/ss_2.jpg
          description: Game screenshots  
        tags:
          type: array
          items:
            type: string
          example: [ "FPS", "Shooter", "e-sports" ]
          description: Game tags
        operational_systems:
          type: array
          items:
            type: string
          example: [ "windows", "linux" ]
          description: Supported operational systems by the game
    ResponseErrorGameNotFound:
      type: object
      properties:
        message:
          type: string
          default: Game not found!
    ResponseErrorGameIdNotProvided:
      type: object
      properties:
        message:
          type: string
          default: Game ID is required in query
    ResponseAllGames:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/ResponsePagination'
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ResponseGameComplete'
              - $ref: '#/components/schemas/ResponseGameComplete'
              - $ref: '#/components/schemas/ResponseGameComplete'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
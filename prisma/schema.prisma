generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String
  password       String
  photo          String?
  photo_id       String?
  created_at     DateTime         @default(now())
  last_login     DateTime?        @default(now())
  updated_at     DateTime         @updatedAt
  FavoriteGames  FavoriteGames[]
  GamesPlayed    GamesPlayed[]
  PlayLaterGames PlayLaterGames[]
}

model Questions {
  id         String       @id @default(cuid())
  question   String
  required   Boolean
  min_length Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  tag        QuestionsTag
  type       QuestionsType
  options    Answers[]
}

model Answers {
  id          String    @id @default(cuid())
  question_id String
  answer      String
  value       String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  question    Questions @relation(fields: [question_id], references: [id])
}

model Quizzes {
  id                  String          @id @default(cuid())
  user_id             String
  favorite_games      Int[]
  genres              String[]
  categories          String[]
  operational_systems String[]
  game_language       String
  publishers          String[]
  game_modes          String[]
  game_styles         String[]
  camera_perspective  String[]
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  GameSuggested       GameSuggested[]
}

model GameSuggested {
  id                String   @id @default(cuid())
  quiz_id           String
  name              String
  short_description String
  header_image      String
  release_date      String
  suggested_at      DateTime @default(now())
  game_id           Int
  quiz              Quizzes  @relation(fields: [quiz_id], references: [id])
}

model FavoriteGames {
  id                String   @id @default(cuid())
  name              String
  short_description String
  header_image      String
  release_date      String
  favorited_at      DateTime @default(now())
  user_id           String
  game_id           Int
  user              User     @relation(fields: [user_id], references: [id])
}

model PlayLaterGames {
  id                String   @id @default(cuid())
  user_id           String
  game_id           Int
  name              String
  short_description String
  header_image      String
  release_date      String
  added_at          DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id])
}

model GamesPlayed {
  id                String   @id @default(cuid())
  user_id           String
  game_id           Int
  name              String
  short_description String
  header_image      String
  release_date      String
  user_rating       Int
  review            String?
  played_at         DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id])
}

model Games {
  id                   String   @id @default(cuid())
  game_id              Int      @unique
  name                 String
  short_description    String
  about_the_game       String
  header_image         String
  release_date         String
  supported_languages  String[]
  full_audio_languages String[]
  publishers           String[]
  categories           String[]
  genres               String[]
  screenshots          String[]
  tags                 String[]
  operational_systems  String[]
}

enum QuestionsTag {
  FAVORITE_GAMES
  GENRES
  CATEGORIES
  OPERATIONAL_SYSTEMS
  GAME_LANGUAGE
  PUBLISHERS
  MODE
  STYLE
  CAMERA
}

enum QuestionsType {
  SINGLE_CHOICE
  MULTIPLE_CHECKBOX
  INPUT_CHECKBOX
}